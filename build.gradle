buildscript {
    dependencies {
        classpath group: 'gradle.plugin.com.github.jengelman.gradle.plugins', name: 'shadow', version: '7.0.0'
    }
}

plugins {
    id 'architectury-plugin' version "$architectury_version"
    id 'dev.architectury.loom' version "$architectury_loom_version" apply false
}

architectury {
    minecraft = mc_version
}

subprojects {
    apply plugin: 'dev.architectury.loom'

    loom {
        silentMojangMappingsLicense()
    }

    dependencies {
        minecraft "com.mojang:minecraft:$mc_version"
        mappings loom.officialMojangMappings()
    }
}

allprojects {
    apply plugin: 'com.github.johnrengelman.shadow'
    apply plugin: 'java'
    apply plugin: 'architectury-plugin'
    apply plugin: 'maven-publish'

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    version = mod_version

    repositories {
        // More convenient access to CF mods.
        maven { url 'https://www.cursemaven.com' }
        maven { url 'https://maven.architectury.dev' }
        mavenCentral()
    }

    configurations {
        bundle { transitive = false }
        implementation.extendsFrom bundle
    }

    dependencies {
        compileOnly group: 'org.jetbrains', name: 'annotations', version: '16.0.2'
        compileOnly group: 'javax.annotation', name: 'javax.annotation-api', version: '1.3.2'
        compileOnly group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.2'

        compileOnly group: 'org.projectlombok', name: 'lombok', version: '1.18.20'
        annotationProcessor group: 'org.projectlombok', name: 'lombok', version: '1.18.20'

        testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.3.1'
        testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.3.1'
    }

    shadowJar {
        configurations = [project.configurations.bundle]
        classifier = ''
    }

    build.dependsOn shadowJar

    tasks.withType(Test) {
        useJUnitPlatform()
        ignoreFailures = false
        failFast = true
    }

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }
}
